defaults: &DAD
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/react 
    
version: 2.1

commands:
  sy:
    parameters:
      to:
        type: string
        default: "crze"
    steps:
      - run : echo << parameters.to >>

      
jobs:
  build:
    <<: *DAD
    steps:
      - checkout
      - run: 
          name: "Install packages"
          command: npm i
      # - run: npm lint
      - save_cache:
          key: v2-node-modules-{{ checksum "package.json"}}
          paths:
            - ~/react/node_modules
      # - sy:
      #     to: "ZXEA"
      # - run: 
      #     name: "Install packages"
      #     command: |
      #       echo $NAME > output.txt
      # - persist_to_workspace:
      #     root: ~/react
      #     paths:
      #       - output.txt
  test:
    <<: *DAD
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v2-node-modules-{{ checksum "package.json"}}
      - run: echo "Test passed"
      # - run: npm run test

      # - attach_workspace:
      #     at: ~/react
      # - run: 
      #     name: "Print hello"
      #     command: |
      #       ls . 
      #       echo 'hello'
      #       cat ~/react/output.txt
      #       #cat /home/circleci/project/output.txt
  analyze:
    <<: *DAD
    steps:
      - checkout
      # - run: exit 1
      # - run: 
      #     name: "Print world"
      #     command: echo "world passed"
      - restore_cache:
          keys: 
            - v2-node-modules-{{ checksum "package.json"}}
      # - run: npm audit
      - run: echo "Audited"
      - run: 
          name: "Print world"
          command: echo "world failed"
          when: on_fail
  infrastructure_setup:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/react
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v2-node-modules-{{ checksum "package.json"}}
      - run:
          name: "Run cloudformation to create infrastructure"
          command: |
            aws cloudformation deploy \
            --template-file cfn/template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
      # - run:
      #     name: "Delete stack if failed"
      #     when: on_fail
      #     command: |
      #       aws cloudformation delete-stack \
      #       --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
      #       --region us-east-1
      - run:
          name: Create inventory file
          command: |
            echo "[all]" > ansible/inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters 'Name=tag:Project, Values=Udacity' \
            --output text >> ansible/inventory
      - save_cache: 
          key: inventory-file-{{ .Revision }}
          paths: 
            - ~/react/ansible/inventory
            - v2-node-modules-{{ checksum "package.json"}}
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: ~/react
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: 
            - "93:c6:07:20:b2:a3:f5:d8:39:28:d3:4f:aa:f0:d9:91"
      - run:
          name: Install ansible
          command: | 
            apk add --update ansible
      - restore_cache:
          keys: 
            - inventory-file-{{ .Revision }}
            - v2-node-modules-{{ checksum "package.json"}}
      - run:
          name: Copy project files to configure
          command: |
            ls -a .
            mkdir -p ansible/roles/configure/files
            cp -r --parents ./public ansible/roles/configure/files/
            cp -r --parents ./src ansible/roles/configure/files/
            cp -r --parents ./node_modules ansible/roles/configure/files/
            cp default.conf ansible/roles/configure/files
            cp Dockerfile ansible/roles/configure/files
            cp .dockerignore ansible/roles/configure/files
            cp package.json ansible/roles/configure/files
            cp package-lock.json ansible/roles/configure/files
            ls -a ansible/roles/configure/files
      - run:
          name: Configure setup
          command: |
            ansible-playbook -i ansible/inventory ansible/playbook.yml
    
  # smoke_test_green_deployment:
  #   docker: 
  #     - image: alpine:latest
  #   steps:
  #     run: echo "Smoke test"



workflows:
  default:
    jobs:
      - build
      - test:
          requires:
            - build
      - analyze:
          requires:
            - test
      - infrastructure_setup:
          requires:
            - analyze
      - configure_infrastructure:
          requires:
            - infrastructure_setup
