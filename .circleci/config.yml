defaults: &DAD
    docker:
      - image: cimg/node:14.17
    working_directory: ~/react 
    
version: 2.1

commands:
  sy:
    parameters:
      to:
        type: string
        default: "crze"
    steps:
      - run : echo << parameters.to >>
  destroy_stack:
    steps:
      - run:
          name: "Remove just created resoucre"
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1


      
jobs:
  build:
    <<: *DAD
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-modules-{{ checksum "package.json" }}
      - run: 
          name: "Install packages"
          command: npm install --no-save
      # - run: npm lint
      - save_cache:
          key: node-modules-{{ checksum "package.json" }}
          paths:
            - ~/react/node_modules
      # - sy:
      #     to: "ZXEA"
      # - run: 
      #     name: "Install packages"
      #     command: |
      #       echo $NAME > output.txt
      # - persist_to_workspace:
      #     root: ~/react
      #     paths:
      #       - output.txt
  test:
    <<: *DAD
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-modules-{{ checksum "package.json" }}
      - run: echo "Test passed"
      # - run: npm run test

      # - attach_workspace:
      #     at: ~/react
      # - run: 
      #     name: "Print hello"
      #     command: |
      #       ls . 
      #       echo 'hello'
      #       cat ~/react/output.txt
      #       #cat /home/circleci/project/output.txt
  analyze:
    <<: *DAD
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-modules-{{ checksum "package.json" }}
      # - run: npm audit
      - run: echo "Audited"
      - run: 
          name: "Print world"
          command: echo "world failed"
          when: on_fail
  infrastructure_setup:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/react
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-modules-{{ checksum "package.json" }}
      - run:
          name: "Run cloudformation to create infrastructure"
          command: |
            aws cloudformation deploy \
            --template-file cfn/template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
      - run:
          name: Create inventory file
          command: |
            echo "[all]" > ansible/inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters 'Name=tag:Project, Values=Udacity' \
            --output text >> ansible/inventory
      - save_cache: 
          key: inventory-file-{{ .Revision }}
          paths: 
            - ~/react/ansible/inventory
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: ~/react
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-modules-{{ checksum "package.json" }}
      - restore_cache:
          keys: 
            - inventory-file-{{ .Revision }}
      - add_ssh_keys: 
          fingerprints: 
            - "93:c6:07:20:b2:a3:f5:d8:39:28:d3:4f:aa:f0:d9:91"
      - run:
          name: Install ansible
          command: | 
            apk add --update ansible
      - run:
          name: Copy project files to configure
          command: |
            echo ${PWD}
            ls -a .
            mkdir -p ansible/roles/configure/files
            cp -r --parents ./public ansible/roles/configure/files/
            cp -r --parents ./src ansible/roles/configure/files/
            cp -r --parents ./node ansible/roles/configure/files/
            cp -r --parents /home/circleci/react/node_modules ansible/roles/configure/files/
            cp default.conf ansible/roles/configure/files
            cp Dockerfile ansible/roles/configure/files
            cp .dockerignore ansible/roles/configure/files
            cp package.json ansible/roles/configure/files
            ls -a ansible/roles/configure/files
      - run:
          name: Configure setup
          command: |
            ansible-playbook -i ansible/inventory ansible/playbook.yml
    
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: apk add --update curl
      # - run:
      #     name: smoke test
      #     command: |
      #       URL="https://blog.udacity.com/"
      #       # Test if website exists
      #       if curl -s --head ${URL} 
      #       then
      #         return 0
      #       else
      #         return 1
      #       fi
      - run: 
          name: Simulate error
          command: |
            return 1
      - destroy_stack

  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cfn/bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file cfn/bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync ./node/test/ s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
    
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cfn/cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="uda-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  default:
    jobs:
      # - build
      # - test:
      #     requires:
      #       - build
      # - analyze:
      #     requires:
      #       - test
      # - infrastructure_setup:
      #     requires:
      #       - analyze
      # - configure_infrastructure:
      #     requires:
      #       - infrastructure_setup
      # - smoke_test:
      #     requires:
      #       - configure_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires: create_and_deploy_front_end
      - promote_to_production:
          requires: get_last_deployment_id
      - clean_up_old_front_end:
          requires: promote_to_production

      
